'use strict';

const log = x => host.diagnostics.debugLog(`${x}\n`);
/*
 * Usage: .scriptrun wasm.js
 */
function invokeScript() {
  let mem = new WebAssembly.Memory({initial: 0x14}),
      ins = new WebAssembly.Instance(
        new WebAssembly.Module(
          new Uint8Array([ // xxd -i -g 1 source.wasm | sed "/0x/!d" | clip
            0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x09, 0x02, 0x60,
            0x02, 0x7f, 0x7f, 0x00, 0x60, 0x00, 0x00, 0x02, 0x1d, 0x02, 0x06, 0x73,
            0x74, 0x64, 0x6c, 0x69, 0x62, 0x05, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x00,
            0x00, 0x02, 0x6a, 0x73, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x02,
            0x00, 0x14, 0x03, 0x02, 0x01, 0x01, 0x07, 0x08, 0x01, 0x04, 0x6d, 0x61,
            0x69, 0x6e, 0x00, 0x01, 0x0a, 0x0a, 0x01, 0x08, 0x00, 0x41, 0x00, 0x41,
            0x12, 0x10, 0x00, 0x0b, 0x0b, 0x18, 0x01, 0x00, 0x41, 0x00, 0x0b, 0x12,
            0x54, 0x68, 0x69, 0x73, 0x27, 0x73, 0x20, 0x57, 0x41, 0x53, 0x4d, 0x2c,
            0x20, 0x64, 0x75, 0x64, 0x65, 0x21
          ])
        ), {stdlib: { // use wasm2wat (the part of WABT) to tie together elements
          print: function print(ofs, len) { // see https://github.com/WebAssembly/wabt
            log(String.fromCharCode.apply(null, new Uint8Array(mem.buffer, ofs, len)))
          }
        }, js: {memory: mem}}
      );
  ins.exports.main();
}
